name: CI Pipeline

on:
  pull_request:
    branches:
      - master


jobs:
  build:
    runs-on: ubuntu-latest

    env:
      JAVA_HOME: "/opt/hostedtoolcache/Java_Temurin-Hotspot_jdk/17.0.13-11/x64"
      ANDROID_HOME: "/usr/local/lib/android/sdk"
      ANDROID_SDK_ROOT: "/usr/local/lib/android/sdk"


    steps:
      # Step 1 : Checkout du code source
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2 : Configuration de JDK 17
      - name: Setup JDK
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: temurin

      # Step 3 : Configuration du SDK Android
      - name: Setup Android SDK
        uses: android-actions/setup-android@v2


      # Step 4 : Donner la permission d'a Gradle sur linux
      - name: Give execute permission to gradlew
        run: chmod +x ./gradlew


      # Step 5 : Reconstruire le fichier keystore à partir du secret
      - name: Decode keystore file
        run: |
          echo "${{ secrets.KEYSTORE_FILE_BASE64 }}" | base64 -d > app/arista-keystore.jks
          ls -la app/ # Vérification que le fichier a bien été généré


      - name: Kill any running emulator
        run: adb emu kill || true



      # Step  : Créer l'AVD et démarrer l'émulateur Android
      - name: Start Android Emulator
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: 30
          target: google_apis
          arch: x86_64
          force-avd-creation: true
          cores: 2
          avd-name: test
          emulator-boot-timeout: 1200
          emulator-port: 5554
          emulator-options: -no-window -gpu swiftshader_indirect -no-snapshot -noaudio -no-boot-anim -accel off -no-metrics
          disable-animations: true
          disable-spellchecker: true
          disable-linux-hw-accel: true
          enable-hw-keyboard: false
          channel: stable
          script: ./gradlew clean

      # Step  : Lancer l'emulateur
      - name: Start emulator
        run: adb emu start

      # Step  : Lancer les tests unitaires
      - name: Tests
        run: |
          ./gradlew test


      # Step  : Générer le rapport Jacoco
      - name: Generate JacocoReport
        run: |
          ./gradlew jacocoTestReport


      # Step  : Analyse SonarCloud
      - name: Run SonarCloud Analysis
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          ./gradlew sonarqube \
            -Dsonar.projectKey=JumpingKeyCaps_OCR_Projet16_Exercice \
            -Dsonar.organization=jumpingKeyCaps \
            -Dsonar.host.url=https://sonarcloud.io \
            -Dsonar.coverage.jacoco.xmlReportPaths=app/build/reports/jacoco/jacocoTestReport/jacocoTestReport.xml



      # Step  : Construire le projet en incluant la signature
      - name:  Build
        run: |
          ./gradlew assembleRelease
        env:
          KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
          KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
          KEY_ALIAS: ${{ secrets.KEY_ALIAS }}


      # Step  : No Validation PR en cas d'échec
      - name: Clearance PR
        if: ${{ failure() }}
        run: echo "Build ou analyse de qualité échouée, PR bloquée."




















