name: CI Pipeline

on:
  pull_request:
    branches:
      - master


jobs:
  build:
    runs-on: ubuntu-latest

    env:
      JAVA_HOME: "/opt/hostedtoolcache/Java_Temurin-Hotspot_jdk/17.0.13-11/x64"
      ANDROID_HOME: "/usr/local/lib/android/sdk"
      ANDROID_SDK_ROOT: "/usr/local/lib/android/sdk"


    steps:
      # Step 1 : Checkout du code source
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2 : Configuration de JDK 17
      - name: Setup JDK
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: temurin

      # Step 3 : Configuration du SDK Android
      - name: Setup Android SDK
        uses: android-actions/setup-android@v2


      # Step 4 : Donner la permission d'a Gradle sur linux
      - name: Give execute permission to gradlew
        run: chmod +x ./gradlew


      # Step 5 : Reconstruire le fichier keystore à partir du secret
      - name: Decode keystore file
        run: |
          echo "${{ secrets.KEYSTORE_FILE_BASE64 }}" | base64 -d > app/arista-keystore.jks
          ls -la app/ # Vérification que le fichier a bien été généré


      # kill emu if exist
      - name: Kill any running emulator
        run: |
          adb emu kill || true
          for i in `seq 1 10`; do
          if [[ $(adb devices | grep emulator) ]]; then
           echo "Killing emulator..."
           adb emu kill
           sleep 2
          fi
          done
      # Delete AVD if exist
      - name: Delete existing AVD (if any)
        run: avdmanager delete avd -n test || true

    #  - name: Create AVD
    #    run: |
    #      echo "y" | $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --install "system-images;android-30;google_apis;x86_64"
    #      echo "no" | $ANDROID_HOME/cmdline-tools/latest/bin/avdmanager create avd -n test -k "system-images;android-30;google_apis;x86_64" --device "pixel_4" || true

    #  - name: Start Emulator
    #    run: |
    #      nohup $ANDROID_HOME/emulator/emulator -avd test -no-window -gpu swiftshader_indirect -no-audio -no-boot-anim -accel off -no-metrics > /dev/null 2>&1 &
         
          

      - name: Create AVD
        run: |
            echo "no" | avdmanager create avd -n test -k "system-images;android-30;google_apis;x86_64"

      - name: Start emulator
        run: emulator -avd test -no-window -gpu angle &





      # Step  : Star emu and wait device
      - name:  wait for device
        run: |
          echo "Waiting for emulator to start..."
          adb wait-for-device
          adb shell while [[ $(adb shell getprop sys.boot_completed) != 1 ]]; do sleep 1; done
          adb shell echo "Device is ready"
          adb devices -l



      # Step  : Lancer les tests instrumented
      - name: Run Instrumented Tests
        run: |
          ./gradlew connectedDebugAndroidTest

      # Step  : Lancer les tests unitaires
      - name: Tests
        run: |
          ./gradlew test
          

      # Step  : Générer le rapport Jacoco
      - name: Generate JacocoReport
        run: |
          ./gradlew jacocoTestReport


      # Step  : Analyse SonarCloud
      - name: Run SonarCloud Analysis
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          ./gradlew sonarqube \
            -Dsonar.projectKey=JumpingKeyCaps_OCR_Projet16_Exercice \
            -Dsonar.organization=jumpingKeyCaps \
            -Dsonar.host.url=https://sonarcloud.io \
            -Dsonar.coverage.jacoco.xmlReportPaths=app/build/reports/jacoco/jacocoTestReport/jacocoTestReport.xml



      # Step  : Construire le projet en incluant la signature
      - name:  Build
        run: |
          ./gradlew assembleRelease
        env:
          KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
          KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
          KEY_ALIAS: ${{ secrets.KEY_ALIAS }}


      # Step  : No Validation PR en cas d'échec
      - name: Clearance PR
        if: ${{ failure() }}
        run: echo "Build ou analyse de qualité échouée, PR bloquée."




















