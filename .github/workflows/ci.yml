name: CI Pipeline

on:
  pull_request:
    branches: [ "master"]


jobs:
  build:
    runs-on: ubuntu-latest


    steps:
      # Step 1 : Checkout du code source
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2 : Configuration de JDK 17
      - name: Setup JDK
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: temurin


      # Step 3 : Donner la permission execution au gradle wrapper
      - name: Give execute permission to gradlew wrapper
        run: chmod +x ./gradlew



      # Step 4 : Reconstruire le fichier keystore à partir du secret
      - name: Decode keystore file
        run: |
          echo "${{ secrets.KEYSTORE_FILE_BASE64 }}" | base64 -d > app/arista-keystore.jks
          ls -la app/ 
          


      #start emulator and run instrumented tests
      - name: Enable KVM
        run: |
          echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
          sudo udevadm control --reload-rules
          sudo udevadm trigger --name-match=kvm
      

      # Step  : Lancer les tests unitaire et instrumented
      - name: run tests
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        uses: reactivecircus/android-emulator-runner@v2
        with:
          target: google_apis
          arch: x86_64
          api-level: 35
          script: |
            echo "@@@@@@@@@@@@@@@@  Waiting for emulator to stabilize..."
            sleep 30
            echo "****************"
            echo "@@@@@@@@@@@@@@@@  Unlocking emulator screen..."
            adb shell input keyevent 82
            adb shell wm dismiss-keyguard
            echo "****************"
            echo "@@@@@@@@@@@@@@@@  Running instrumented tests..."
            ./gradlew connectedDebugAndroidTest
            echo "****************"
            echo "@@@@@@@@@@@@@@@@  Running unit tests..."
            ./gradlew testDebugUnitTest
            echo "****************"
            echo "@@@@@@@@@@@@@@@@   [Generating Jacoco report...]"
            ./gradlew jacocoReport 
            echo "**************** "
            echo "**************** "
            echo "@@@@@@@@@@@@@@@@ Checking if Jacoco report exists..."
            ls app/build/reports/jacoco/jacocoTestReport
            cat app/build/reports/jacoco/jacocoTestReport/jacocoTestReport.xml || echo " XXXXXXXXXXXXXX Jacoco report not found"
            echo "**************** "
            echo "@@@@@@@@@@@@@@@@   [SonarCloud Analysis...]"
            ./gradlew sonar -Dsonar.projectKey=JumpingKeyCaps_OCR_Projet16_Exercice -Dsonar.organization=jumpingkeycaps -Dsonar.host.url=https://sonarcloud.io -Dsonar.coverage.jacoco.xmlReportPaths=app/build/reports/jacoco/jacocoTestReport/jacocoTestReport.xml
               

      

      # Step  : No Validation PR en cas d'échec
      - name: Clearance PR
        if: ${{ failure() }}
        run: echo "Build ou analyse de qualité échouée, PR bloquée."























